ARG BUILD_ID
ARG DOCKER_URL
ARG DOCKER_ORG

FROM ${DOCKER_URL}/${DOCKER_ORG}/base-img:b${BUILD_ID}

ARG NPM_REGISTRY ""

ARG BUILD_ID
RUN echo "Building common: ${BUILD_ID}"

USER root

RUN apt-get update &&\
    apt-get install -y build-essential \
                       libz-dev \
                       virtualenv \
                       maven \
                       rlwrap \
                       docker.io &&\
    apt-get clean



COPY ext/gitconfig /home/build/.gitconfig

# Install GraalVM
ENV GRAAL_VM_URL "https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.1.0/graalvm-ce-java11-linux-amd64-21.1.0.tar.gz"
RUN curl -o graal-vm.tar.gz -L  "${GRAAL_VM_URL}" &&\
    tar -xvf graal-vm.tar.gz -C /opt  &&\
    rm -rf graal-vm.tar.gz &&\
    ls -la /opt &&\
    ln -s "/opt/$(basename /opt/graalvm*)" /opt/graalvm

ENV GRAALVM_HOME /opt/graalvm/

COPY cert cert

RUN find /opt -name cacerts

RUN set -e &&\
    ls -la /opt/graalvm/bin &&\
    if [[ -f cert/cacerts ]]; then \
      cp -f cert/cacerts /opt/graalvm/lib/security/cacerts; \
    fi

ENV PATH $PATH:"/opt/graalvm/bin"


COPY --chown=2025:2024 ext/ssh-config  /home/build/.ssh/config
RUN chmod 700 /home/build/.ssh/config



ENV GRAALVM_NATIVE_IMAGE_URL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.1.0/native-image-installable-svm-java11-linux-amd64-21.1.0.jar
RUN mkdir /tmp/graalvm/ &&\
    curl -o /tmp/graalvm-native-image.jar ${GRAALVM_NATIVE_IMAGE_URL} -k -L &&\
    gu -L install /tmp/graalvm-native-image.jar &&\
    rm -rf /tmp/graalvm-native-image.jar


# Install clojure
RUN set -e &&\
    curl -L https://download.clojure.org/install/linux-install-1.10.3.967.sh -o clojure-linux-install.sh &&\
    chmod +x clojure-linux-install.sh &&\
    ./clojure-linux-install.sh

RUN set -e &&\
    curl -o /usr/bin/lein  https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein &&\
    chmod +x /usr/bin/lein

ENV PATH "${PATH}:/opt/bin/lein"

RUN curl -s https://raw.githubusercontent.com/borkdude/jet/master/install > jet.sh &&\
     chmod +x jet.sh &&\
     ./jet.sh

RUN apt-get update &&\
    apt-get install -y git-extras &&\
    apt-get clean

# Install nodejs
RUN apt-get install -y nodejs npm &&\
    node --version &&\
    node -v &&\
    npm -v

RUN cat /usr/local/share/ca-certificates/*.crt > /usr/local/share/ca-certificates/npm.pem  &&\
    echo "Setting NPM cert" &&\
    npm config set -g cafile /usr/local/share/ca-certificates/npm.pem || echo "No certificates"

RUN set -e &&\
    if [[ ! "${NPM_REGISTRY}" == "" ]]; then \
      npm config set -g registry ${NPM_REGISTRY}; \
    fi

COPY --chown=build:build ext/settings.xml /home/build/.m2/settings.xml

RUN mkdir /dist &&\
    mkdir /dist/release-libs &&\
    chown build:build /dist -R

# Install flyway


# Database mgmt
ENV FLYWAY_EDITION community
RUN set -ex &&\
    curl -o flyway.tar.gz "https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/7.3.1/flyway-commandline-7.3.1-linux-x64.tar.gz" &&\
    ls -la . &&\
    tar xvf flyway.tar.gz &&\
    rm -rf flyway.tar.gz &&\
    mv "$(pwd)/flyway-7.3.1" /opt/flyway-7.3.1 &&\
    chmod +x /opt/flyway-7.3.1/flyway &&\
    ln -s "/opt/flyway-7.3.1/flyway" "/usr/local/bin/flyway"

RUN apt-get update &&\
    apt-get install -y golang-go &&\
    go version &&\
    apt-get clean

RUN mkdir -p /dist/release-libs/ &&\
    chown build:build -R /dist


# Setup trust
RUN mkdir -p /home/build/.ssh &&\
    ssh-keyscan -p 22 github.com >> /home/build/.ssh/known_hosts



COPY --chown=2025:2024 ext/deploy.sh /dist/deploy.sh
COPY --chown=build:build ext/test.yml /dist/deploy/test.yml

COPY --chown=2025:2025 ext/merge.clj merge.clj
COPY --chown=2025:2025 ext/deps.edn /home/build/.clojure/deps.edn
COPY --chown=2025:2025 ext/DEV.edn /home/build/.clojure/DEV.edn
COPY --chown=2025:2025 ext/PROD.edn /home/build/.clojure/PROD.edn

USER build
WORKDIR /home/build
