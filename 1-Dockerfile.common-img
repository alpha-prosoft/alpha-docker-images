ARG DOCKER_URL
ARG DOCKER_ORG

FROM ${DOCKER_URL}/${DOCKER_ORG}/base-img:local-build

USER root

RUN set -e &&\
    yum ${YUM_OPTS} install -y unzip python3 expect libtool-ltdl-devel expat-devel &&\
    yum groups mark install "Development Tools" &&\
    yum groups mark convert "Development Tools" &&\
    yum groupinstall -y "Development Tools"


RUN set -e &&\
    curl https://gitlab.com/graphviz/graphviz/-/archive/2.50.0/graphviz-2.50.0.zip -o gv.tar &&\
    unzip -qq gv.tar

RUN  cd graphviz-2.50.0 &&\
    ./autogen.sh
RUN set -e &&\
    cd graphviz-2.50.0 &&\
    ./configure &&\
    make

RUN set -e &&\
    cd graphviz-2.50.0/cmd/dot &&\
    make dot_static

RUN pwd &&\
    ls -la graphviz-2.50.0/cmd/dot

FROM ${DOCKER_URL}/${DOCKER_ORG}/base-img:local-build

COPY --from=0 /home/build/graphviz-2.50.0/cmd/dot/dot_static /home/build/dot_static
COPY --from=0 /usr/lib64/libexpat.so.1 /home/build/lib/libexpat.so.1


WORKDIR /home/build
USER root


RUN cat /etc/group

RUN groupadd --gid 10999 docker

RUN set -e &&\
    amazon-linux-extras enable epel &&\
    yum clean metadata &&\
    yum install -y epel-release 

RUN set -e &&\
    amazon-linux-extras install -y docker 

RUN set -e &&\
    yum ${YUM_OPTS} install -y ca-certificates \
                       unzip \
                       jq \
                       zip \
                       curl \
                       rlwrap 

RUN usermod -aG docker jenkins &&\
    usermod -aG input jenkins &&\
    usermod -aG docker build &&\
    usermod -aG input build

ENV GRAALVM_VERSION "22.1.0"
# Install <GraalVM>

RUN set -e &&\
    yum ${YUM_OPTS} install -y compat-libstdc++-33.x86_64 zlib-devel freetype-devel libstdc++.x86_64 gcc-c++ libstdc++-static


RUN curl -o graal-vm.tar.gz -L https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-java11-linux-amd64-${GRAALVM_VERSION}.tar.gz  &&\
    tar -xf graal-vm.tar.gz -C /opt  &&\
    rm -rf graal-vm.tar.gz &&\
    ls -la /opt &&\
    ln -s "/opt/$(basename /opt/graalvm*)" /opt/graalvm

ENV GRAALVM_HOME /opt/graalvm/
ENV JAVA_HOME /opt/graalvm/

COPY cert/ /opt/cert
RUN set -e &&\
    ls -la /opt/graalvm/bin &&\
    if [[ -f /opt/cert/cacerts ]]; then cp -f /opt/cert/cacerts /opt/graalvm/lib/security/cacerts; fi

ENV PATH $PATH:"/opt/graalvm/bin"


RUN mkdir /tmp/graalvm/ &&\
    curl -o /tmp/graalvm-native-image.jar https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/native-image-installable-svm-java11-linux-amd64-${GRAALVM_VERSION}.jar -k -L &&\
    gu -L install /tmp/graalvm-native-image.jar &&\
    rm -rf /tmp/graalvm-native-image.jar

# </GraalVM>

# Install <maven> 

ENV MAVEN_VERSION 3.9.5
RUN set -e &&\
  mkdir -p /opt/maven &&\
  cd /opt/maven &&\
  curl -OL "https://dlcdn.apache.org/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz" &&\
  tar xvf "apache-maven-${MAVEN_VERSION}-bin.tar.gz" &&\
  rm "apache-maven-${MAVEN_VERSION}-bin.tar.gz"

ENV MAVEN_HOME "/opt/maven/apache-maven-${MAVEN_VERSION}"

ENV PATH=$MAVEN_HOME/bin:$PATH

RUN set -e &&\
    mvn --version

# </maven>



# Install clojure
RUN set -e &&\
    curl -L -O https://github.com/clojure/brew-install/releases/latest/download/linux-install.sh &&\
    chmod +x linux-install.sh &&\
    ./linux-install.sh

RUN set -e &&\
    curl -o /usr/bin/lein  https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein &&\
    chmod +x /usr/bin/lein

USER build
RUN set -e &&\
    lein --version
USER root

RUN curl -s https://raw.githubusercontent.com/borkdude/jet/master/install > jet.sh &&\
     chmod +x jet.sh &&\
     ./jet.sh


RUN set -e &&\
    yum ${YUM_OPTS} install -y git-extras

# Install nodejs
RUN curl -kL https://nodejs.org/dist/v16.16.0/node-v16.16.0-linux-x64.tar.xz  -o  node-v16.16.0-linux-x64.tar.xz &&\
    tar -xf node-v16.16.0-linux-x64.tar.xz &&\
    rm -rf node-v16.16.0-linux-x64.tar.xz &&\
    mv node-v16.16.0-linux-x64 /opt/

ENV PATH $PATH:/opt/node-v16.16.0-linux-x64/bin

RUN node --version
RUN npm --version 


COPY --chown=build:build ext/settings.xml /home/build/.m2/settings.xml

# Install flyway

USER root

# Database mgmt
ENV FLYWAY_EDITION community
RUN set -ex &&\
    curl -o flyway.tar.gz "https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/7.3.1/flyway-commandline-7.3.1-linux-x64.tar.gz" &&\
    ls -la . &&\
    tar xf flyway.tar.gz &&\
    rm -rf flyway.tar.gz &&\
    mv "$(pwd)/flyway-7.3.1" /opt/flyway-7.3.1 &&\
    chmod +x /opt/flyway-7.3.1/flyway &&\
    ln -s "/opt/flyway-7.3.1/flyway" "/usr/local/bin/flyway"

USER build

# install go-lang compiler
USER root
RUN set -e &&\
    yum ${YUM_OPTS} install -y golang-go &&\
    go version

RUN mkdir -p /dist/release-libs/ &&\
    chown build:build -R /dist

# Some usefull tolls
RUN set -e &&\
    yum ${YUM_OPTS} install -y vim

RUN chown build:build /home/build -R
WORKDIR /home/build
USER build

COPY --chown=build:build ext/merge.clj merge.clj
COPY --chown=build:build ext/deps.edn /home/build/.clojure/deps.edn
COPY --chown=build:build ext/DEV.edn /home/build/.clojure/DEV.edn
COPY --chown=build:build ext/PROD.edn /home/build/.clojure/PROD.edn
