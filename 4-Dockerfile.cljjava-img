ARG DOCKER_URL
ARG DOCKER_ORG

FROM ${DOCKER_URL}/${DOCKER_ORG}/common-img:local-build

ONBUILD ARG GIT_USERNAME
ONBUILD ARG GIT_PASSOWRD


ONBUILD ARG BUILD_RAM=31
ONBUILD ARG PROJECT_NAME 
ONBUILD ENV PROJECT_NAME ${PROJECT_NAME}

ONBUILD ARG BUILD_ID 
ONBUILD ENV BUILD_ID ${BUILD_ID}

ONBUILD ARG ARTIFACT_ORG 
ONBUILD ENV ARTIFACT_ORG ${ARTIFACT_ORG}

ONBUILD ARG DEPLOY_TARGET
ONBUILD ENV DEPLOY_TARGET ${DEPLOY_TARGET}

ONBUILD ARG MAIN_CLASS
ONBUILD ARG EXT_INIT_PACKAGES

ONBUILD ARG ROOT_DIR
ONBUILD ENV ROOT_DIR_E ${ROOT_DIR:-"./"}

ONBUILD RUN echo "Building in ${ROOT_DIR}:${ROOT_DIR_E}"
ONBUILD RUN echo "Project name ${PROJECT_NAME}"

COPY --chown=build:build ext/test.yml /dist/deploy/test.yml
COPY --chown=build:build ext/reflectconfig.json /dist/reflectconfig.json


COPY --chown=build:build ext/bootstrap bootstrap
RUN chmod +x bootstrap

COPY --chown=build:build ext/merge.clj merge.clj

COPY --chown=build:build ext/deps.edn /home/build/.clojure/deps.edn
COPY --chown=build:build ext/DEV.edn /home/build/.clojure/DEV.edn
COPY --chown=build:build ext/PROD.edn /home/build/.clojure/PROD.edn


ONBUILD RUN sed -i 's/${MAIN_CLASS}/'${MAIN_CLASS}'/g' /home/build/.clojure/deps.edn
ONBUILD RUN cat /home/build/.clojure/deps.edn
ONBUILD COPY --chown=build:build deps.edn deps-temp.edn
ONBUILD COPY --chown=build:build "${ROOT_DIR_E}src" src
ONBUILD COPY --chown=build:build "${ROOT_DIR_E}api" api
ONBUILD COPY --chown=build:build "${ROOT_DIR_E}schema" schema
ONBUILD COPY --chown=build:build "${ROOT_DIR_E}resources" resources
ONBUILD COPY --chown=build:build "${ROOT_DIR_E}test" test 
COPY --chown=build:build ext/tests.edn tests.edn

ONBUILD RUN set -e &&\
            clojure merge.clj &&\
            clojure -Stree &&\
            cat deps.edn &&\
            set -e && clojure -M:test:runner &&\
            set -e && clojure -M:test:unit &&\
            echo "Running integration tests" &&\
            curl -s http://169.254.169.254/latest/dynamic/instance-identity/document -v &&\
            export AWS_DEFAULT_REGION="$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)" &&\
            TARGET_ACCOUNT_ID="$(aws sts get-caller-identity | jq -r '.Account')" &&\
            cred=$(aws sts assume-role \
                --role-arn arn:aws:iam::${TARGET_ACCOUNT_ID}:role/PipelineRole \
                --role-session-name "${PROJECT_NAME}-deployment-${RANDOM}" \
                --endpoint https://sts.${AWS_DEFAULT_REGION}.amazonaws.com \
                --region ${AWS_DEFAULT_REGION}) &&\
            export AWS_ACCESS_KEY_ID=$(echo $cred | jq -r '.Credentials.AccessKeyId') &&\
            export AWS_SECRET_ACCESS_KEY=$(echo $cred | jq -r '.Credentials.SecretAccessKey') &&\
            export AWS_SESSION_TOKEN=$(echo $cred | jq -r '.Credentials.SessionToken') &&\
            domain_name=$(aws es list-domain-names  | jq -r '.DomainNames[0].DomainName') &&\
            echo "Found domain ${domain_name}" &&\
            domain_url=$(aws es describe-elasticsearch-domain --domain-name ${domain_name} | jq -r '.DomainStatus.Endpoints.vpc') &&\
            export IndexDomainEndpoint=$domain_url &&\
            clojure -M:test:it &&\
            echo "Compiling" &&\
            mkdir -p /dist/release-libs/ &&\
            if [[ -d "api" ]]; then \
              cd api; \
              if [[ -f "deps.edn" ]]; then \
                clojure -Sdeps '{:deps {luchiniatwork/cambada {:mvn/version "1.0.2"}}}' \
                  -m cambada.jar \
                  --app-version "1.0.${BUILD_ID}" \
                  --app-artifact-id "${PROJECT_NAME}" \
                  --app-group-id "${ARTIFACT_ORG}" \
                  --copy-source \
                  -o /dist/release-libs/; \
                cp pom.xml "/dist/release-libs/${PROJECT_NAME}-1.0.${BUILD_ID}.jar.pom.xml"; \
               fi \
            fi &&\
            cd /home/build &&\
            echo $(clojure -J-Dedd.runtime=edd.schema.swagger/swagger-runtime -J-Dedd.schema.out="/dist/schema.json" -m ${MAIN_CLASS} || echo "No schema generated") &&\
            ls -la /dist/release-libs/ &&\
            cat deps.edn &&\
            echo "Building" &&\
            clj -Sdeps '{:deps {luchiniatwork/cambada {:mvn/version "1.0.2"}}}' \
             -A:uberjar \
             -m "cambada.uberjar" \
             --main "${MAIN_CLASS}" \
             --app-group-id "com.rbinternational.glms" \
             --app-artifact-id "${PROJECT_NAME}" \
             --app-version "1.0.${BUILD_ID}" \
             --copy-source &&\
            cp target/${PROJECT_NAME}-1.0.${BUILD_ID}-standalone.jar /dist/${PROJECT_NAME}.zip &&\
            rm -rf ~/.m2/repository &&\
            rm -rf target

ONBUILD RUN tree /dist/


