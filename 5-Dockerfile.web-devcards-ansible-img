# syntax=docker/dockerfile:experimental
ARG BUILD_ID
ARG DOCKER_URL
ARG DOCKER_ORG

FROM ${DOCKER_URL}/${DOCKER_ORG}/web-img:b${BUILD_ID}

# Onbuild part
ONBUILD ARG PROJECT_NAME
ONBUILD ENV PROJECT_NAME ${PROJECT_NAME}
ONBUILD ARG DEPLOY_TARGET
ONBUILD ENV DEPLOY_TARGET ${DEPLOY_TARGET}

COPY --chown=build:build ext/deps.edn /home/build/.clojure/deps.edn
COPY --chown=build:build ext/DEV.edn /home/build/.clojure/DEV.edn
COPY --chown=build:build ext/PROD.edn /home/build/.clojure/PROD.edn

COPY --chown=build:build ext/merge.clj merge.clj


ONBUILD COPY --chown=build:build shadow-cljs.edn shadow-cljs.edn

ONBUILD COPY --chown=build:build deps.edn deps-temp.edn

ONBUILD RUN clj -Sdeps '{}' merge.clj
ONBUILD RUN cat deps.edn 


ONBUILD RUN mkdir -p /dist/s3

ONBUILD RUN --mount=type=secret,id=settings.xml,mode=600,uid=2025,gid=2024,dst=/home/build/.m2/settings.xml set -e &&\
             shadow-cljs classpath

ONBUILD COPY --chown=build:build resources resources
ONBUILD COPY --chown=build:build src src
ONBUILD COPY --chown=build:build lib lib
ONBUILD COPY --chown=build:build api api

ONBUILD RUN --mount=type=secret,id=settings.xml,mode=600,uid=2025,gid=2024,dst=/home/build/.m2/settings.xml set -e &&\
              clojure -M:test:runner &&\
              shadow-cljs -A:dev release devcards &&\
              cp -r resources/public/* /dist/s3/ &&\
              mkdir -p resources/dev/template/ &&\
              mkdir -p /dist/template &&\
              cp resources/dev/template/* /dist/template/ &&\
              rm -rf node_modules
                

ONBUILD ARG BUILD_ID
ONBUILD ENV BUILD_ID ${BUILD_ID}

ONBUILD RUN ls -la /dist

# BUILDING -> Edit after this mark and do not remove this mark. Used for gen 4-*

ONBUILD ARG ANSIBLE_LOG_LEVEL
ONBUILD ENV ANSIBLE_LOG_LEVEL ${ANSIBLE_LOG_LEVEL}

ONBUILD ARG AWS_REGION
ONBUILD ENV AWS_REGION ${AWS_REGION}


ONBUILD COPY --chown=build:build ansible ansible
ONBUILD RUN  --mount=type=secret,id=gitcookie,mode=600,uid=1034,gid=1035,dst=/home/build/.gitcookie set -ex &&\
  if [[ -f "ansible/build/requirements.yml" ]]; then \
    ansible-galaxy install -vvvv --force --roles-path ansible/build/roles --keep-scm-meta -r ansible/build/requirements.yml; \
  fi &&\
  if [[ -f "ansible/deploy/requirements.yml" ]]; then \
    ansible-galaxy install -vvvv --force --roles-path ansible/deploy/roles --keep-scm-meta -r ansible/deploy/requirements.yml; \
  fi &&\
  if [[ -d "ansible/deploy" ]]; then \
    mkdir -p /dist/ansible/deploy; \
    cp -r ansible/deploy/* /dist/ansible/deploy; \
  fi 
 


ONBUILD RUN set -ex &&\
  if [[ -f "ansible/build/build.yml" ]]; then \
    mkdir ansible/build/group_vars &&\
    echo "localhost" > ansible/build/inventory &&\
    echo '{"params" : \
             {"BuildId" : "'${BUILD_ID}'", \
              "AWS_DEFAULT_REGION" : "'${AWS_REGION}'", \
              "ProjectName" : "'${PROJECT_NAME}'"}}' \
        > ansible/build/group_vars/all.json &&\
    ansible-playbook \
      -i ansible/build/inventory \
      ${ANSIBLE_LOG_LEVEL:-} \
      ansible/build/build.yml; \
  fi
 
