# syntax=docker/dockerfile:experimental
ARG BUILD_ID
ARG DOCKER_URL
ARG DOCKER_ORG

FROM ${DOCKER_URL}/${DOCKER_ORG}/common-img:b${BUILD_ID}

USER root

RUN curl -L -o /tmp/gradle.zip https://services.gradle.org/distributions/gradle-6.7.1-bin.zip &&\
    unzip -d /opt/gradle /tmp/gradle.zip &&\
    rm /tmp/gradle.zip


RUN ls -la /opt/gradle/gradle-6.7.1

ENV GRADLE_HOME /opt/gradle/gradle-6.7.1
ENV PATH ${GRADLE_HOME}/bin:${PATH}`

RUN set -e \
    gradle --version

ENV SDK_URL "https://dl.google.com/android/repository/commandlinetools-linux-6858069_latest.zip" 
ENV ANDROID_SDK_ROOT "/usr/local/android-sdk" 
ENV ANDROID_VERSION 28 
ENV ANDROID_BUILD_TOOLS_VERSION 29.0.3

# Download Android SDK
RUN mkdir -p "$ANDROID_SDK_ROOT" .android \
    && cd "$ANDROID_SDK_ROOT" \
    && curl -o sdk.zip $SDK_URL \
    && unzip sdk.zip \
    && rm sdk.zip \
    && mkdir "$ANDROID_SDK_ROOT/licenses" 

# Install Android Build Tool and Libraries
RUN set -e &&\
    yes | $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses

RUN set -e \
    && $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --update  \
    && $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager \
        --sdk_root=$ANDROID_SDK_ROOT \
          "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" \
          "platforms;android-${ANDROID_VERSION}" \
          "platform-tools"

# Install Build Essentials
RUN apt-get update && apt-get install build-essential -y && apt-get install file -y && apt-get install apt-utils -y

ENV PATH $PATH:/opt/graalvm/languages/js/bin

RUN npm i -g cordova
RUN npm install -g appcenter-cli

RUN apt install -y openjdk-8-jdk
ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64
ENV PATH PATH $JAVA_HOME/bin:$PATH

RUN chown build:build -R /home/build/.android
RUN chown build:build -R /usr/local/android-sdk

USER build
# BUILDING -> Edit after this mark and do not remove this mark. Used for gen 4-*

ONBUILD ARG ANSIBLE_LOG_LEVEL
ONBUILD ENV ANSIBLE_LOG_LEVEL ${ANSIBLE_LOG_LEVEL}

ONBUILD ARG AWS_REGION
ONBUILD ENV AWS_REGION ${AWS_REGION}


ONBUILD COPY --chown=2025:2024 ansible ansible
ONBUILD RUN  --mount=type=secret,id=gitcookie,mode=600,uid=2025,gid=2024,dst=/home/build/.gitcookie set -ex &&\
  if [[ -f "ansible/build/requirements.yml" ]]; then \
    ansible-galaxy install -vvvv --force --roles-path ansible/build/roles --keep-scm-meta -r ansible/build/requirements.yml; \
  fi &&\
  if [[ -f "ansible/deploy/requirements.yml" ]]; then \
    ansible-galaxy install -vvvv --force --roles-path ansible/deploy/roles --keep-scm-meta -r ansible/deploy/requirements.yml; \
  fi &&\
  if [[ -d "ansible/deploy" ]]; then \
    mkdir -p /dist/ansible/deploy; \
    cp -r ansible/deploy/* /dist/ansible/deploy; \
  fi 
 


ONBUILD RUN set -ex &&\
  if [[ -f "ansible/build/build.yml" ]]; then \
    mkdir ansible/build/group_vars &&\
    echo "localhost" > ansible/build/inventory &&\
    echo '{"params" : \
             {"BuildId" : "'${BUILD_ID}'", \
              "AWS_DEFAULT_REGION" : "'${AWS_REGION}'", \
              "ProjectName" : "'${PROJECT_NAME}'"}}' \
        > ansible/build/group_vars/all.json &&\
    ansible-playbook \
      -i ansible/build/inventory \
      ${ANSIBLE_LOG_LEVEL:-} \
      ansible/build/build.yml; \
  fi
 
