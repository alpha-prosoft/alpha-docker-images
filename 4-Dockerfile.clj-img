ARG DOCKER_URL
ARG DOCKER_ORG

FROM ${DOCKER_URL}/${DOCKER_ORG}/common-img:local-build

ONBUILD ARG GIT_USERNAME
ONBUILD ARG GIT_PASSOWRD


ONBUILD ARG BUILD_RAM=31
ONBUILD ARG PROJECT_NAME 
ONBUILD ENV PROJECT_NAME ${PROJECT_NAME}

ONBUILD ARG BUILD_ID 
ONBUILD ENV BUILD_ID ${BUILD_ID}

ONBUILD ARG ARTIFACT_ORG 
ONBUILD ENV ARTIFACT_ORG ${ARTIFACT_ORG}

ONBUILD ARG DEPLOY_TARGET
ONBUILD ENV DEPLOY_TARGET ${DEPLOY_TARGET}

ONBUILD ARG MAIN_CLASS
ONBUILD ARG EXT_INIT_PACKAGES

ONBUILD ARG ROOT_DIR
ONBUILD ENV ROOT_DIR_E ${ROOT_DIR:-"./"}

ONBUILD RUN echo "Building in ${ROOT_DIR}:${ROOT_DIR_E}"
ONBUILD RUN echo "Project name ${PROJECT_NAME}"


COPY --chown=build:build ext/test.yml /dist/deploy/test.yml
COPY --chown=build:build ext/reflectconfig.json /dist/reflectconfig.json


COPY --chown=build:build ext/bootstrap bootstrap
RUN chmod +x bootstrap

COPY --chown=build:build ext/merge.clj merge.clj

COPY --chown=build:build ext/deps.edn /home/build/.clojure/deps.edn
COPY --chown=build:build ext/DEV.edn /home/build/.clojure/DEV.edn
COPY --chown=build:build ext/PROD.edn /home/build/.clojure/PROD.edn

COPY --chown=build:build ext/build.clj /home/build/build.clj

ONBUILD RUN sed -i 's/${MAIN_CLASS}/'${MAIN_CLASS}'/g' /home/build/.clojure/deps.edn
ONBUILD RUN cat /home/build/.clojure/deps.edn
ONBUILD COPY --chown=build:build deps.edn deps-temp.edn
ONBUILD COPY --chown=build:build "${ROOT_DIR_E}src" src
ONBUILD COPY --chown=build:build "${ROOT_DIR_E}api" api
ONBUILD COPY --chown=build:build "${ROOT_DIR_E}schema" schema
ONBUILD COPY --chown=build:build "${ROOT_DIR_E}resources" resources
ONBUILD COPY --chown=build:build "${ROOT_DIR_E}test" test 
COPY --chown=build:build ext/tests.edn tests.edn

ONBUILD RUN --mount=type=secret,id=settings.xml,mode=600,uid=2025,gid=2024,dst=/home/build/.m2/settings.xml set -e &&\
            echo "START merge" &&\
            clojure merge.clj &&\
            echo "START stree" &&\
            clojure -Stree &&\
            echo "START deps.edn" &&\
            cat deps.edn &&\
            echo "END deps.edn" &&\
            set -e && clojure -M:test:runner &&\
            set -e && clojure -M:test:unit &&\
            echo "Running integration tests" &&\
            SESSION_TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600") &&\ 
            export AWS_DEFAULT_REGION=$(curl -s -H "X-aws-ec2-metadata-token: $SESSION_TOKEN" http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region) &&\
            TARGET_ACCOUNT_ID="$(aws sts get-caller-identity | jq -r '.Account')" &&\
            cred=$(aws sts assume-role \
                --role-arn arn:aws:iam::${TARGET_ACCOUNT_ID}:role/PipelineRole \
                --role-session-name "${PROJECT_NAME}-deployment-${RANDOM}" \
                --endpoint https://sts.${AWS_DEFAULT_REGION}.amazonaws.com \
                --region ${AWS_DEFAULT_REGION}) &&\
            export AWS_ACCESS_KEY_ID=$(echo $cred | jq -r '.Credentials.AccessKeyId') &&\
            export AWS_SECRET_ACCESS_KEY=$(echo $cred | jq -r '.Credentials.SecretAccessKey') &&\
            export AWS_SESSION_TOKEN=$(echo $cred | jq -r '.Credentials.SessionToken') &&\
            domain_name=$(aws es list-domain-names  | jq -r '.DomainNames[0].DomainName') &&\
            echo "Found domain ${domain_name}" &&\
            domain_url=$(aws es describe-elasticsearch-domain --domain-name ${domain_name} | jq -r '.DomainStatus.Endpoints.vpc') &&\
            export IndexDomainEndpoint=$domain_url &&\
            clojure -M:test:it &&\
            echo "Compiling" &&\
            mkdir -p /dist/release-libs/ &&\
            if [[ -d "api" ]]; then \
              cd api; \
              if [[ -f "deps.edn" ]]; then \
                mv deps.edn deps-temp.edn &&\
                clojure /home/build/merge.clj &&\
                echo "START API deps.edn" &&\
                cat deps.edn &&\
                echo "END API deps.edn" &&\
                out_dir=$(mktemp -d) &&\
                echo "Compiling api jar!" &&\
                cp /home/build/build.clj . &&\
                clojure -T:build clean &&\
                clojure -T:build jar \
                  :main "${MAIN_CLASS}" \
                  :group-id "${ARTIFACT_ORG}" \
                  :artifact-id "${PROJECT_NAME}" \
                  :version '"'1.0.${BUILD_ID}'"' \
                  :lms true \
                  :out '"'$out_dir'"' &&\
                cp pom.xml /dist/release-libs/${PROJECT_NAME}-1.0.${BUILD_ID}.jar.pom.xml; \
                cp $out_dir/${PROJECT_NAME}-1.0.${BUILD_ID}.jar /dist/release-libs/${PROJECT_NAME}-1.0.${BUILD_ID}.jar; \
               fi \
            fi &&\
            cd /home/build &&\
            echo $(clojure -J-Dedd.runtime=edd.schema.swagger/swagger-runtime -J-Dedd.schema.out="/dist/schema.json" -m ${MAIN_CLASS} || echo "No schema generated") &&\
            ls -la /dist/release-libs/ &&\
            tree /dist | grep -v "class" &&\
            echo "Preparing extensions" &&\
            if [[ -f /dist/deploy/files/reflectconfig.json ]]; \
            then jq -s "[.[][]]" \
              /dist/deploy/files/reflectconfig.json \
              /dist/reflectconfig.json \
              > /dist/reflectconfig.tmp ; \
              mv /dist/reflectconfig.tmp /dist/reflectconfig.json; \
              echo "Merged extension reflectconfig.json"; fi &&\
            cat /dist/reflectconfig.json &&\
            cat deps.edn &&\
            echo "Building" &&\
            export INIT_PACKAGES="${MAIN_CLASS%%.*},java_http_clj,glms_util,import,batch,aws,jdk,javax,sdk,clj_aws_sign,ring,jsonista,camel_snake_kebab,lambda,clojure,next,org,com,ch,java,iso_7064,borkdude,edd,malli,${EXT_INIT_PACKAGES:-java}" &&\
            out_dir=$(mktemp -d) &&\
            echo "Compiling main uberjar!" &&\
            clojure -T:build clean &&\
            clojure -T:build uber \
             :main "${MAIN_CLASS}" \
             :group-id "${ARTIFACT_ORG}" \
             :artifact-id "${PROJECT_NAME}-standalone" \
             :version '"'1.0.${BUILD_ID}'"' \
             :lms true \
             :out '"'$out_dir'"' &&\
            ls -la /dist/release-libs &&\
            mv pom.xml /dist/release-libs/${PROJECT_NAME}-standalone-1.0.${BUILD_ID}.jar.pom.xml &&\
            mv $out_dir/${PROJECT_NAME}-standalone-1.0.${BUILD_ID}-standalone.jar /dist/release-libs/${PROJECT_NAME}-standalone-1.0.${BUILD_ID}.jar &&\
            resp=$(native-image -jar /dist/release-libs/${PROJECT_NAME}-standalone-1.0.${BUILD_ID}.jar ${PROJECT_NAME} \
                -o lambda_function \
                --no-fallback \
                --enable-https \
                --gc=G1 \
                -J-Xss2m \
                -J-Xmx24g \
                -Dcom.zaxxer.hikari.useWeakReferences=false \
                -Dclojure.tools.logging.factory=lambda.logging/slf4j-json-factory \
                --enable-url-protocols=https \
                -H:+UnlockExperimentalVMOptions \
                -H:NumberOfThreads=8 \
                -H:TraceClassInitialization=true \
                -H:ReflectionConfigurationFiles=/dist/reflectconfig.json \
                -H:+ReportExceptionStackTraces \
                -H:IncludeResources='conf/.*' \
                -H:IncludeResources='META-INF/.*' \
                -H:IncludeResources='META-INF/services/.*' \
                -H:IncludeResources='main/.*' \
                -H:IncludeResources='logback.xml' \
                -H:Log=registerResource \
                --report-unsupported-elements-at-runtime \
                --initialize-at-build-time=${INIT_PACKAGES},sun.rmi.server,sun.rmi.runtime,sun.rmi.runtime,sun.rmi.server,sun.rmi.server \
                --trace-class-initialization=clojure.lang.Compiler \
                --trace-class-initialization=clojure.lang.RT \
                --trace-class-initialization=java.security.SecureRandom \
                --trace-class-initialization=java.util.UUID \
                --trace-object-instantiation=java.util.UUID \
                --trace-object-instantiation=java.security.SecureRandom \
                --initialize-at-run-time=org.httpkit.client \
                --initialize-at-run-time=org.postgresql.sspi.SSPIClient \
                --initialize-at-run-time=org.httpkit.client.SslContextFactory \
                --initialize-at-run-time=org.httpkit.client.HttpClient || echo "FAILED") &&\
             echo "RESP: $resp" &&\
             if [[ "$resp" == "FAILED" ]]; then cat /home/build/reports/traced_class_initialization*; exit 1; fi &&\
             tree &&\
             echo "#### PRINTING TRACE INITALIZATIONS, THIS ARE NOT EXEPTIONS ######" &&\
             cat /home/build/reports/traced_class_initialization* &&\
             echo "###############################################################" &&\
             echo "Packaging" &&\
             mv ${PROJECT_NAME} lambda_function &&\
             chmod +x lambda_function &&\
             zip /dist/${PROJECT_NAME}.jar lambda_function &&\
             mv lambda_function /dist/lambda_function &&\
             rm -rf ~/.m2/repository &&\
             rm -rf target


ONBUILD RUN tree /dist/


